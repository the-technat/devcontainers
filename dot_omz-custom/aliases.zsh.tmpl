##################
# General
##################
alias ll="ls -lahF --hyperlink=auto --color=auto"
function temp {
  DIR=$(mktemp -u)
  mkdir -p $DIR
  export TEMP=$DIR
  cd $DIR
}

##################
# Editing
##################
alias -s tf=vim
alias -s yaml=vim
alias -s go=vim
alias -s json=vim
alias -s md=vim
alias -g tfgen="terraform-docs md --output-file README.md"
alias -g gss="git status -s"

##################
# Kubernetes
##################
function pruned {
  docker system prune -a --volumes
}
alias dip="docker inspect -f '\{\{range .NetworkSettings.Networks\}\}\{\{.IPAddress\}\}\{\{end\}\}'"
alias kcn="kubens"
alias kcuc="kubectx"
alias kak="kubectl apply -k"
alias kaf="kubectl apply -f"
alias kk="kubectl --kubeconfig ~/.kube/second"
alias ks="k -n kube-system"
alias kebug="kubectl run --rm -ti --image docker.io/nicolaka/netshoot debugbox$RANDOM -- bash"
podCountPerNode () {
        kubectl get pods -A -o json | jq -rs 'map({Node: .items[].spec.nodeName}) | group_by(.Node) | map({Node: .[0].Node, Pods: length}) ' | jq -r '"Node\t\t\t\t\t\tPods","----------------------------------------------\t----",( .[] | "\(.Node)\t\(.Pods
)")'
}
podsByNodeLabel() {
  for node in $(kubectl get nodes -l $1 -ojsonpath='{.items[*].metadata.name}'); do 
    kubectl get pods -A -o wide --field-selector spec.nodeName=$node
  done
}
function allns {
  for i in $(kubectl api-resources --verbs=list --namespaced -o name | grep -v "events.events.k8s.io" | grep -v "events" | sort | uniq); do
    echo "Resource:" $i

    if [ -z "$1" ]
    then
        kubectl get --ignore-not-found ${i}
    else
        kubectl -n ${1} get --ignore-not-found ${i}
    fi
  done
}
startSSMSession() {
        aws ssm start-session --target $1
}
ssmToInstance() {
		nodeToExec=$(kubectl get nodes -o=name | sed -e 's/^node\///g' | fzf)
		id=$(kubectl get node $nodeToExec -o=jsonpath='{.spec.providerID}' | grep -Eo 'i-[a-z0-9]{1,}$')
		aws $profile ssm start-session --target $id --debug
}
nodeCount() {
        count=$(kubectl get nodes --no-headers | wc -l)
        cluster=$(kubectl config current-context)
        echo "$cluster has $count nodes"
}
podCount() {
        count=$(kubectl get pods -A --no-headers | wc -l)
        cluster=$(kubectl config current-context)
        echo "$cluster has $count pods"
}
podPlacement() {
   all_azs=$(kubectl get nodes -o jsonpath='{.items[*].metadata.labels.topology\.kubernetes\.io/zone}')
   for az in $(echo "${all_azs[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '); do
     total_count=0
     for node in $(kubectl get nodes -l "topology.kubernetes.io/zone=$az" -o=jsonpath='{.items[*].metadata.name}'); do
       count=$(kubectl get pods -A -l $1 --field-selector spec.nodeName=$node --no-headers | wc -l)
       echo "$node: $count"
       total_count=$((total_count + count))
     done
     echo "Total in $az: $total_count"
   done
}
nodesInAZ() {
   NODES=$(kubectl get nodes -o json -l eks.amazonaws.com/nodegroup=$1 | jq -r '.items[].metadata.name')
   for node in $NODES; do
         count=$(kubectl get pods -A --field-selector spec.nodeName=$node --no-headers | wc -l)
         echo "$node: $count"
   done
}
getArgoAdminPW() {
  kubectl -n argocd get secrets argocd-initial-admin-secret -o jsonpath='{.data.password}' |base64 -d
}
applyArgo() {
  if [[ $1 == "" ]]; then
    echo "Need an Argo Version"
    exit 1
  fi
  kubectl apply -f https://github.com/argoproj/argo-cd/raw/refs/tags/$1/manifests/install.yaml -n argocd              kind-argocd-1-30-2-12
}
exposeArgo() {
  kubectl -n argocd expose service argocd-server --type=LoadBalancer --name argocd-server-lb
}
argopfstart() {
  kubectl port-forward -n argocd svc/argocd-server 8080:443 & 
}
argopfstop() {
  kill $(ps | grep "argocd-server" | grep "port-forward" | cut -d ' ' -f1)
} 
kindcloud() {
  CONTAINER_NAME='cloud-provider-kind'
  ## only til https://github.com/kubernetes/k8s.io/pull/7351 is merged
  git clone git@github.com:kubernetes-sigs/cloud-provider-kind.git /tmp/cpk
  docker build /tmp/cpk -t cloud-provider-kind:local
  rm -rf /tmp/cpk
  CID=$(docker ps -q -f status=running -f name=^/${CONTAINER_NAME}$)
  if [ "${CID}" ]; then
    docker stop ${CONTAINER_NAME}
    docker rm ${CONTAINER_NAME}
  fi
  unset CID
  docker run --name cloud-provider-kind -d --rm --network kind -v /var/run/docker.sock:/var/run/docker.sock cloud-provider-kind:local
}